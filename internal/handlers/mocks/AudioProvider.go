// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-media-stream/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// AudioProvider is an autogenerated mock type for the AudioProvider type
type AudioProvider struct {
	mock.Mock
}

// GetAudioById provides a mock function with given fields: ctx, id
func (_m *AudioProvider) GetAudioById(ctx context.Context, id int) (*domain.Audio, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAudioById")
	}

	var r0 *domain.Audio
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Audio, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Audio); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Audio)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAudioByVideoId provides a mock function with given fields: ctx, id
func (_m *AudioProvider) GetAudioByVideoId(ctx context.Context, id int) (*[]domain.Audio, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAudioByVideoId")
	}

	var r0 *[]domain.Audio
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*[]domain.Audio, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]domain.Audio); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Audio)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAudioProvider creates a new instance of AudioProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAudioProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AudioProvider {
	mock := &AudioProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
