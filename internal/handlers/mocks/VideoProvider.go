// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-media-stream/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// VideoProvider is an autogenerated mock type for the VideoProvider type
type VideoProvider struct {
	mock.Mock
}

// GetVideoById provides a mock function with given fields: ctx, id
func (_m *VideoProvider) GetVideoById(ctx context.Context, id int) (*domain.Video, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoById")
	}

	var r0 *domain.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Video, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Video); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVideos provides a mock function with given fields: ctx
func (_m *VideoProvider) GetVideos(ctx context.Context) (*[]domain.Video, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVideos")
	}

	var r0 *[]domain.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]domain.Video, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]domain.Video); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAudio provides a mock function with given fields: ctx, videoID, audioID
func (_m *VideoProvider) SetAudio(ctx context.Context, videoID int, audioID int) error {
	ret := _m.Called(ctx, videoID, audioID)

	if len(ret) == 0 {
		panic("no return value specified for SetAudio")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, videoID, audioID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTime provides a mock function with given fields: ctx, videoID, time
func (_m *VideoProvider) SetTime(ctx context.Context, videoID int, time float32) error {
	ret := _m.Called(ctx, videoID, time)

	if len(ret) == 0 {
		panic("no return value specified for SetTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float32) error); ok {
		r0 = rf(ctx, videoID, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVideoProvider creates a new instance of VideoProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoProvider {
	mock := &VideoProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
